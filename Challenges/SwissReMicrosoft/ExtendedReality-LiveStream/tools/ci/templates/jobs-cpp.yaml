# Copyright (c) Microsoft Corporation.
# Licensed under the MIT License.

# [TEMPLATE] Compile library mrwebrtc.dll

parameters:
# Build agent pool
- name: buildAgent
  displayName: 'Build Agent Pool'
  type: string
  default: ''
# Run Component Governance detection and submit results
- name: runComponentDetection
  displayName: 'Run component detection'
  type: boolean
  default: true
# Build platform
- name: buildPlatform
  displayName: 'Build Platform'
  type: string
  default: ''
  values:
  - 'Win32'
  - 'UWP'
# Build architecture
- name: buildArch
  displayName: 'Build Architecture'
  type: string
  default: ''
  values:
  - 'x86'
  - 'x64'
  - 'ARM'
  - 'ARM64'
# Build configuration
- name: buildConfig
  displayName: 'Build Configuration'
  type: string
  default: ''
  values:
  - 'Debug'
  - 'Release'
# Do testing
- name: withTesting
  displayName: 'Enable testing'
  type: boolean
  default: true
# Publish artifacts after building
- name: publishArtifacts
  displayName: 'Publish artifacts'
  type: boolean
  default: false

jobs:

# Compile mrwebrtc.dll
- job: mrwebrtc_${{parameters.buildPlatform}}_${{parameters.buildArch}}_${{parameters.buildConfig}}
  displayName: 'mrwebrtc (${{parameters.buildPlatform}}-${{parameters.buildArch}}-${{parameters.buildConfig}})'
  timeoutInMinutes: 360
  pool:
    name: ${{parameters.buildAgent}}
    demands: msbuild
  variables:
  - group: MixedReality-WebRTC-ArtifactConfig
  - name: buildTriple
    value: ${{parameters.buildPlatform}}-${{parameters.buildArch}}-${{parameters.buildConfig}}
  # This is overwritten later if restoring PDBs
  - name: PackagesConfigFile
    value: '$(Build.SourcesDirectory)/tools/build/mrwebrtc/${{parameters.buildPlatform}}/packages.config'
  steps:

  # Calculate MSBuild platform
  - powershell: |
      if ("$env:BUILD_ARCH" -eq "x86") {
        $msbuildPlatform = "Win32"
      } else {
        $msbuildPlatform = $env:BUILD_ARCH
      }
      Write-Host "MSBuild platform = $msbuildPlatform"
      Write-Host "##vso[task.setvariable variable=msbuildPlatform;]$msbuildPlatform"
    displayName: 'Compute MSBuild platform'
    env:
      BUILD_ARCH: ${{parameters.buildArch}}
    timeoutInMinutes: 5

  # Checkout MixedReality-WebRTC
  - checkout: 'self'
    submodules: 'recursive'
    fetchDepth: '50'

  # Map build* variables to script* ones
  - task: PowerShell@2
    displayName: 'Map script variables'
    inputs:
      targetType: 'filePath'
      filePath: '$(Build.SourcesDirectory)/tools/ci/mapVariables.ps1'
      arguments: '${{parameters.buildPlatform}} ${{parameters.buildArch}} ${{parameters.buildConfig}}'
    timeoutInMinutes: 5

  # Use NuGet 5.2.0
  - task: NuGetToolInstaller@1
    displayName: 'Use NuGet 5.2.0'
    inputs:
      versionSpec: 5.2.0
    timeoutInMinutes: 5

  # Ensure that Python 2.7.16+ is the default; the Google scripts don't work with Python 3.x
  - task: UsePythonVersion@0
    displayName: 'Use Python 2.7.16+ x64 for Google GN'
    inputs:
      versionSpec: '>=2.7.16 <2.8.0'
    timeoutInMinutes: 5

  # Clean-up unused files
  - script: |
      del /F /S /Q "depot_tools/external_bin/gsutil"
      del /F /S /Q "chromium/third_party/protobuf/java"
      del /F /S /Q "chromium/third_party/protobuf/ruby"
      del /F /S /Q "chromium/third_party/pycoverage"
      del /F /S /Q "chromium/tools/android"
      del /F /S /Q "chromium/tools/code_coverage"
    workingDirectory: 'external/webrtc-uwp-sdk/webrtc/xplatform'
    displayName: 'Clean-up unused files'

  # Run component detection
  - ${{ if eq(parameters.runComponentDetection, 'true') }}:
    - task: ms.vss-governance-buildtask.governance-build-task-component-detection.ComponentGovernanceComponentDetection@0
      displayName: 'Component Detection'
      timeoutInMinutes: 15

  # Build libwebrtc with the script from Google
  - task: PythonScript@0
    displayName: 'Build libwebrtc'
    inputs:
      scriptSource: 'filePath'
      scriptPath: 'external/webrtc-uwp-sdk/scripts/run.py'
      arguments: '-a prepare build -t webrtc -p $(scriptPlatform) --cpus $(scriptArch) -c $(scriptConfig) --noColor --noWrapper --cpp17'
    timeoutInMinutes: 60

  # Build Org.WebRtc.WrapperGlub.lib
  - ${{ if eq(parameters.buildPlatform, 'UWP') }}:
    - task: MSBuild@1
      displayName: 'Build UWP wrappers'
      inputs:
        solution: 'external/webrtc-uwp-sdk/webrtc/windows/projects/msvc/Org.WebRtc.WrapperGlue.Universal/Org.WebRtc.WrapperGlue.vcxproj'
        msbuildVersion: 15.0
        msbuildArchitecture: x64
        platform: '$(msbuildPlatform)'
        configuration: '${{parameters.buildConfig}}'
      timeoutInMinutes: 60

  # Build mrwebrtc.dll
  - task: MSBuild@1
    displayName: 'Build mrwebrtc'
    inputs:
      solution: 'tools/build/mrwebrtc/${{parameters.buildPlatform}}/mrwebrtc-${{parameters.buildPlatform}}.vcxproj'
      msbuildVersion: 15.0
      msbuildArchitecture: x64
      platform: '$(msbuildPlatform)'
      configuration: '${{parameters.buildConfig}}'
    timeoutInMinutes: 20

  # Publish mrwebrtc.dll and mrwebrtc.pdb
  - ${{ if eq(parameters.publishArtifacts, 'true') }}:
    - task: CopyFiles@2
      displayName: 'Stage mrwebrtc artifacts'
      inputs:
        sourceFolder: 'bin/${{parameters.buildPlatform}}/${{parameters.buildArch}}/${{parameters.buildConfig}}'
        contents: '**/mrwebrtc.@(pdb|dll)'
        targetFolder: '$(Build.ArtifactStagingDirectory)'
    - task: PublishPipelineArtifact@0
      displayName: 'Publish mrwebrtc ($(buildTriple))'
      inputs:
        artifactName: 'mrwebrtc_$(buildTriple)'
        targetPath: '$(Build.ArtifactStagingDirectory)'

  - ${{ if and(eq(parameters.withTesting, 'true'), eq(parameters.buildPlatform, 'Win32')) }}:
    # Run mrwebrtc Windows Desktop tests
    - template: 'steps-mrwebrtc-test-win32.yaml'
      parameters:
        buildArch: '${{parameters.buildArch}}'
        buildConfig: '${{parameters.buildConfig}}'
