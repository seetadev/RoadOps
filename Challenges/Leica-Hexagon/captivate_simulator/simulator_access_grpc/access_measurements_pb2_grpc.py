# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import access_measurements_pb2 as access__measurements__pb2


class SetGetterStub(object):
    """The service definition.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetAngleHzRad = channel.unary_unary(
                '/access.SetGetter/GetAngleHzRad',
                request_serializer=access__measurements__pb2.GetRequest.SerializeToString,
                response_deserializer=access__measurements__pb2.Reply.FromString,
                )
        self.GetAngleVRad = channel.unary_unary(
                '/access.SetGetter/GetAngleVRad',
                request_serializer=access__measurements__pb2.GetRequest.SerializeToString,
                response_deserializer=access__measurements__pb2.Reply.FromString,
                )
        self.GetDistSlope = channel.unary_unary(
                '/access.SetGetter/GetDistSlope',
                request_serializer=access__measurements__pb2.GetRequest.SerializeToString,
                response_deserializer=access__measurements__pb2.Reply.FromString,
                )
        self.SetAngleHzRad = channel.unary_unary(
                '/access.SetGetter/SetAngleHzRad',
                request_serializer=access__measurements__pb2.SetRequest.SerializeToString,
                response_deserializer=access__measurements__pb2.Reply.FromString,
                )
        self.SetAngleVRad = channel.unary_unary(
                '/access.SetGetter/SetAngleVRad',
                request_serializer=access__measurements__pb2.SetRequest.SerializeToString,
                response_deserializer=access__measurements__pb2.Reply.FromString,
                )
        self.SetDistSlope = channel.unary_unary(
                '/access.SetGetter/SetDistSlope',
                request_serializer=access__measurements__pb2.SetRequest.SerializeToString,
                response_deserializer=access__measurements__pb2.Reply.FromString,
                )


class SetGetterServicer(object):
    """The service definition.
    """

    def GetAngleHzRad(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAngleVRad(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetDistSlope(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetAngleHzRad(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetAngleVRad(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetDistSlope(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SetGetterServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetAngleHzRad': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAngleHzRad,
                    request_deserializer=access__measurements__pb2.GetRequest.FromString,
                    response_serializer=access__measurements__pb2.Reply.SerializeToString,
            ),
            'GetAngleVRad': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAngleVRad,
                    request_deserializer=access__measurements__pb2.GetRequest.FromString,
                    response_serializer=access__measurements__pb2.Reply.SerializeToString,
            ),
            'GetDistSlope': grpc.unary_unary_rpc_method_handler(
                    servicer.GetDistSlope,
                    request_deserializer=access__measurements__pb2.GetRequest.FromString,
                    response_serializer=access__measurements__pb2.Reply.SerializeToString,
            ),
            'SetAngleHzRad': grpc.unary_unary_rpc_method_handler(
                    servicer.SetAngleHzRad,
                    request_deserializer=access__measurements__pb2.SetRequest.FromString,
                    response_serializer=access__measurements__pb2.Reply.SerializeToString,
            ),
            'SetAngleVRad': grpc.unary_unary_rpc_method_handler(
                    servicer.SetAngleVRad,
                    request_deserializer=access__measurements__pb2.SetRequest.FromString,
                    response_serializer=access__measurements__pb2.Reply.SerializeToString,
            ),
            'SetDistSlope': grpc.unary_unary_rpc_method_handler(
                    servicer.SetDistSlope,
                    request_deserializer=access__measurements__pb2.SetRequest.FromString,
                    response_serializer=access__measurements__pb2.Reply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'access.SetGetter', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class SetGetter(object):
    """The service definition.
    """

    @staticmethod
    def GetAngleHzRad(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/access.SetGetter/GetAngleHzRad',
            access__measurements__pb2.GetRequest.SerializeToString,
            access__measurements__pb2.Reply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetAngleVRad(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/access.SetGetter/GetAngleVRad',
            access__measurements__pb2.GetRequest.SerializeToString,
            access__measurements__pb2.Reply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetDistSlope(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/access.SetGetter/GetDistSlope',
            access__measurements__pb2.GetRequest.SerializeToString,
            access__measurements__pb2.Reply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetAngleHzRad(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/access.SetGetter/SetAngleHzRad',
            access__measurements__pb2.SetRequest.SerializeToString,
            access__measurements__pb2.Reply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetAngleVRad(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/access.SetGetter/SetAngleVRad',
            access__measurements__pb2.SetRequest.SerializeToString,
            access__measurements__pb2.Reply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetDistSlope(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/access.SetGetter/SetDistSlope',
            access__measurements__pb2.SetRequest.SerializeToString,
            access__measurements__pb2.Reply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
