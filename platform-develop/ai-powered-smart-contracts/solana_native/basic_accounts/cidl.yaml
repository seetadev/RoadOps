cidl: "0.8"
info:
  name: validate_accounts
  title: Validate Accounts
  summary: |-
    - The purpose of this CIDL is to validate all the supported features for an account
    - Verifies it can define a Non-PDA account with one field
    - Verifies it can define PDA account with one field and a static seed
    - Verifies it can define PDA account with one field, a static and dynamic seed
    - Verifies it can define PDA account with all the possible seeds data types
    - Verifies account space is calculated automatically
    - Verifies it can mark an account as mutable
    - Verifies it can mark an account as immutable
    - Verifies it can generate the code to initialize an account in "Singleton mode" a.k.a init
    - Verifies it can generate the code to initialize an account in "Non-Singleton mode" a.k.a init_if_needed
    - Verifies the fee payer is the default payer when using an initialization method without explicitly specifying the payer
    - Verifies it can close a Non-PDA account
    - Verifies it can close a PDA account
    - Verifies the fee payer is the default lamport receiver when a rent receiver is not specify
    
    Some useful links:

      - [Blockchain Extensions](https://docs.codigo.ai/category/blockchain-extensions)
      - [Learning the Basics](https://docs.codigo.ai/c√≥digo-interface-description-language/learning-the-basics)
      - [Building Solana Programs with CIDL: A Comprehensive Guide Part I](https://docs.codigo.ai/guides/part-1-building-solana-programs)
  version: 0.0.0
  contact:
    name: Codigo
    web: https://codigo.ai
    git: https://github.com/Codigo-ai
    email: support@codigo.ai
  license:
    name: Codigo
    url: https://codigo.ai/documents/Codigo---Terms-of-Service.pdf
types:
  NonPDAAccountWithOneField:
    fields:
      - name: field_1
        type: u8
  PDAAccountWithOneStaticSeedAndOneField:
    solana:
      seeds:
        - name: "Static Value"
    fields:
      - name: field_1
        type: u8
  PDAAccountWithOneStaticAndDynamicSeedAndOneField:
    solana:
      seeds:
        - name: "Static Value"
        - name: dynamic
          type: u8
    fields:
      - name: field_1
        type: u8
  PDAAccountVerifiesSeedsTypes:
    solana:
      seeds:
        # Native types
        - name: u8_type
          type: u8
        - name: u16_type
          type: u16
        - name: u32_type
          type: u32
        - name: i8_type
          type: i8
        - name: i16_type
          type: i16
        - name: i32_type
          type: i32
        - name: string_type
          type: string
        # Extended type
        - name: pubkey_type
          type: sol:pubkey
    fields:
      - name: field_1
        type: u8
methods:
  # mutable
  - name: instruction1
    summary: Test `mut` using Non-PDA account that has one field
    inputs:
      - name: account
        type: NonPDAAccountWithOneField
        solana:
          attributes: [ mut ]
      - name: input_1
        type: u8
  - name: instruction2
    summary: Test `mut` using PDA account that has one static seed and one field
    inputs:
      - name: account
        type: PDAAccountWithOneStaticSeedAndOneField
        solana:
          attributes: [ mut ]
      - name: input_1
        type: u8
  - name: instruction3
    summary: Test `mut` using PDA account that has one static and dynamic seed, and one field
    inputs:
      - name: account
        type: PDAAccountWithOneStaticAndDynamicSeedAndOneField
        solana:
          attributes: [ mut ]
      - name: input_1
        type: u8
  - name: instruction4
    summary: Test `mut` using PDA account that has all the possible data types for dynamic seeds
    inputs:
      - name: account
        type: PDAAccountVerifiesSeedsTypes
        solana:
          attributes: [ mut ]
      - name: input_1
        type: u8
  # immutable
  - name: instruction5
    summary: Test `non-mut` using Non-PDA account that has one field
    inputs:
      - name: account
        type: NonPDAAccountWithOneField
  - name: instruction6
    summary: Test `non-mut` using PDA account that has one static seed and one field
    inputs:
      - name: account
        type: PDAAccountWithOneStaticSeedAndOneField
  - name: instruction7
    summary: Test `non-mut` using PDA account that has one static and dynamic seed, and one field
    inputs:
      - name: account
        type: PDAAccountWithOneStaticAndDynamicSeedAndOneField
  - name: instruction8
    summary: Test `non-mut` using PDA account that has all the possible data types for dynamic seeds
    inputs:
      - name: account
        type: PDAAccountVerifiesSeedsTypes
  # singleton initialization
  - name: instruction9
    summary: Test `init` using Non-PDA account that has one field
    inputs:
      - name: account
        type: NonPDAAccountWithOneField
        solana:
          attributes: [ init ]
      - name: input_1
        type: u8
  - name: instruction10
    summary: Test `init` using PDA account that has one static seed and one field
    inputs:
      - name: account
        type: PDAAccountWithOneStaticSeedAndOneField
        solana:
          attributes: [ init ]
      - name: input_1
        type: u8
  - name: instruction11
    summary: Test `init` using PDA account that has one static and dynamic seed, and one field
    inputs:
      - name: account
        type: PDAAccountWithOneStaticAndDynamicSeedAndOneField
        solana:
          attributes: [ init ]
      - name: input_1
        type: u8
  - name: instruction12
    summary: Test `init` using PDA account that has all the possible data types for dynamic seeds
    inputs:
      - name: account
        type: PDAAccountVerifiesSeedsTypes
        solana:
          attributes: [ init ]
      - name: input_1
        type: u8
  # non-singleton initialization
  - name: instruction13
    summary: Test `init_if_needed` using Non-PDA account that has one field
    inputs:
      - name: account
        type: NonPDAAccountWithOneField
        solana:
          attributes: [ init_if_needed ]
      - name: input_1
        type: u8
  - name: instruction14
    summary: Test `init_if_needed` using PDA account that has one static seed and one field
    inputs:
      - name: account
        type: PDAAccountWithOneStaticSeedAndOneField
        solana:
          attributes: [ init_if_needed ]
      - name: input_1
        type: u8
  - name: instruction15
    summary: Test `init_if_needed` using PDA account that has one static and dynamic seed, and one field
    inputs:
      - name: account
        type: PDAAccountWithOneStaticAndDynamicSeedAndOneField
        solana:
          attributes: [ init_if_needed ]
      - name: input_1
        type: u8
  - name: instruction16
    summary: Test `init_if_needed` using PDA account that has all the possible data types for dynamic seeds
    inputs:
      - name: account
        type: PDAAccountVerifiesSeedsTypes
        solana:
          attributes: [ init_if_needed ]
      - name: input_1
        type: u8
  # close accounts
  - name: instruction17
    summary: Test `close` using Non-PDA account that has one field
    inputs:
      - name: account
        type: NonPDAAccountWithOneField
        solana:
          attributes: [ close ]
  - name: instruction18
    summary: Test `close` using PDA account that has one static seed and one field
    inputs:
      - name: account
        type: PDAAccountWithOneStaticSeedAndOneField
        solana:
          attributes: [ close ]
  - name: instruction19
    summary: Test `close` using PDA account that has one static and dynamic seed, and one field
    inputs:
      - name: account
        type: PDAAccountWithOneStaticAndDynamicSeedAndOneField
        solana:
          attributes: [ close ]
  - name: instruction20
    summary: Test `close` using PDA account that has all the possible data types for dynamic seeds
    inputs:
      - name: account
        type: PDAAccountVerifiesSeedsTypes
        solana:
          attributes: [ close ]