// Generated by LiveScript 1.6.0
(function(){
  var localStorage, ref$, any, map, filter, install, replace, get, jsonParse, providers, dash, eth, etc, syx, syx2, ltc, usdt, usdt_erc20, vlx_evm, vlx_erc20, currentConfigs, requiredFields, notIn, verifyPlugin, getRegistry, getPlugin, getPluginOneByOne, getInstallList, saveRegistry, addToRegistry, removeFromRegistry, buildName, installPlugin, uninstallPlugin, askUser, buildInstall, buildQuickInstall, buildUninstall, buildInstallByName, toString$ = {}.toString, slice$ = [].slice, out$ = typeof exports != 'undefined' && exports || this;
  localStorage = require('localStorage');
  ref$ = require('prelude-ls'), any = ref$.any, map = ref$.map, filter = ref$.filter;
  ref$ = require('./modal.ls'), install = ref$.install, replace = ref$.replace;
  get = require('../web3t/providers/superagent.js').get;
  jsonParse = require('./json-parse.ls');
  providers = require('./providers.ls');
  dash = require('../web3t/plugins/dash-coin.js');
  eth = require('../web3t/plugins/eth-coin.js');
  etc = require('../web3t/plugins/etc-coin.js');
  syx = require('../web3t/plugins/symblox.js');
  syx2 = require('../web3t/plugins/symblox-v2.js');
  ltc = require('../web3t/plugins/ltc-coin.js');
  usdt = require('../web3t/plugins/usdt-coin.js');
  usdt_erc20 = require('../web3t/plugins/usdt_erc20.json');
  currentConfigs = {
    dash: dash,
    eth: eth,
    syx: syx,
    syx2: syx2,
    usdt: usdt,
    usdt_erc20: usdt_erc20,
    ltc: ltc,
  };
  requiredFields = ['type', 'token', 'enabled'];
  notIn = function(arr, arr2){
    return any(function(it){
      return arr2.indexOf(it) === -1;
    })(
    arr);
  };
  verifyPlugin = function(plugin, cb){
    if (toString$.call(plugin).slice(8, -1) !== 'Object') {
      return cb("Expected Object");
    }
    if (notIn(requiredFields, Object.keys(plugin))) {
      return cb("Required fields: " + requiredFields.join(', '));
    }
    return cb(null);
  };
  getRegistry = function(cb){
    var registryString, ref$;
    registryString = (ref$ = localStorage.getItem('plugin-registry')) != null ? ref$ : "[]";
    return jsonParse(registryString, cb);
  };
  getPlugin = function(name, cb){
    var coinName, item;
    coinName = name.substr("plugin-".length);
    if (currentConfigs[coinName]) {
      item = JSON.stringify(currentConfigs[coinName]);
    } else {
      return cb(null);
    }
    if (toString$.call(item).slice(8, -1) !== 'String') {
      return cb(null);
    }
    return jsonParse(item, cb);
  };
  getPluginOneByOne = function(arg$, cb){
    var item, rest;
    item = arg$[0], rest = slice$.call(arg$, 1);
    if (item == null) {
      return cb(null, []);
    }
    return getPlugin(item, function(err, plugin){
      if (err != null) {
        return cb(err);
      }
      return getPluginOneByOne(rest, function(err, other){
        var all;
        if (err != null) {
          return cb(err);
        }
        all = all = plugin ? [plugin].concat(other) : other;
        return cb(null, all);
      });
    });
  };
  out$.getInstallList = getInstallList = function(cb){
    return getRegistry(function(err, data){
      if (err != null) {
        return cb(err);
      }
      return getPluginOneByOne(data, function(err, res){
        if (err != null) {
          return cb(err);
        }
        return cb(null, res);
      });
    });
  };
  saveRegistry = function(registry){
    var resultedString;
    resultedString = JSON.stringify(registry);
    return localStorage.setItem('plugin-registry', resultedString);
  };
  addToRegistry = function(name, cb){
    return getRegistry(function(err, registry){
      if (err != null) {
        return cb(err);
      }
      if (registry.indexOf(name) > -1) {
        return;
      }
      registry.push(name);
      saveRegistry(registry);
      return cb(null);
    });
  };
  removeFromRegistry = function(name, cb){
    return getRegistry(function(err, registry){
      var index;
      if (err != null) {
        return cb(err);
      }
      index = registry.indexOf(name);
      if (index === -1) {
        return cb(null);
      }
      registry.splice(index, 1);
      saveRegistry(registry);
      return cb(null);
    });
  };
  buildName = function(token){
    return "plugin-" + token;
  };
  installPlugin = function(plugin, cb){
    return verifyPlugin(plugin, function(err){
      var name, body;
      if (err != null) {
        return cb(err);
      }
      plugin.canUninstall = true;
      name = buildName(plugin.token);
      body = JSON.stringify(plugin);
      localStorage.setItem(name, body);
      return addToRegistry(name, function(err){
        if (err != null) {
          return cb(err);
        }
        return cb(null);
      });
    });
  };
  uninstallPlugin = function(cweb3, token, cb){
    var name;
    if (toString$.call(token).slice(8, -1) !== 'String') {
      return cb("expected string argument");
    }
    name = buildName(token);
    return removeFromRegistry(name, function(err){
      if (err != null) {
        return cb(err);
      }
      localStorage.setItem(name, "");
      return cweb3.refresh(cb);
    });
  };
  askUser = function(cweb3, store, plugin, cb){
    return getRegistry(function(err, registry){
      if (err != null) {
        return cb(err);
      }
      if (toString$.call(plugin).slice(8, -1) !== 'Object') {
        return cb("pluing is required");
      }
      if (toString$.call(cb).slice(8, -1) !== 'Function') {
        return cb("callback is required");
      }
      if (registry.indexOf(plugin.token) === -1) {
        return install(store, plugin, cb);
      }
      return replace(store, plugin, cb);
    });
  };
  out$.buildInstall = buildInstall = function(cweb3, store){
    return function(plugin, cb){
      if (store.current.page === 'locked') {
        return cb("Please unlock the wallet");
      }
      return verifyPlugin(plugin, function(err){
        if (err != null) {
          return cb(err);
        }
        return askUser(cweb3, store, plugin, function(err){
          if (err != null) {
            return cb(err);
          }
          return installPlugin(plugin, function(err){
            if (err != null) {
              return cb(err);
            }
            return cweb3.refresh(cb);
          });
        });
      });
    };
  };
  out$.buildQuickInstall = buildQuickInstall = function(cweb3, store){
    return function(plugin, cb){
      if (store.current.page === 'locked') {
        return cb("Please unlock the wallet");
      }
      return verifyPlugin(plugin, function(err){
        if (err != null) {
          return cb(err);
        }
        return installPlugin(plugin, function(err){
          if (err != null) {
            return cb(err);
          }
          return cweb3.refresh(cb);
        });
      });
    };
  };
  out$.buildUninstall = buildUninstall = function(cweb3, store){
    return function(name, cb){
      return uninstallPlugin(cweb3, name, cb);
    };
  };
  out$.buildInstallByName = buildInstallByName = function(cweb3, store){
    return function(name, cb){
      return get("https://raw.githubusercontent.com/web3space/plugin-registry/master/plugins/" + name + ".json").end(function(err, resp){
        if (err != null) {
          return cb(err);
        }
        return jsonParse(resp.text, function(err, plugin){
          if (err != null) {
            return cb(err);
          }
          if (plugin.type == null) {
            return cb("type is required");
          }
          if (plugin.enabled !== true) {
            return cb("enabled is true");
          }
          return installPlugin(plugin, function(err){
            if (err != null) {
              return cb(err);
            }
            return cweb3.refresh(cb);
          });
        });
      });
    };
  };
}).call(this);
