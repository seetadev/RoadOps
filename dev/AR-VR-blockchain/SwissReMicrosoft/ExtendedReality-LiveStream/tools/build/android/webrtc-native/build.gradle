apply plugin: 'com.android.library'

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion
    defaultConfig {
        project.archivesBaseName = "mrwebrtc"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode rootProject.ext.versionCode
        versionName rootProject.ext.versionName
        ndk {
            abiFilters "arm64-v8a"
        }
        packagingOptions {
            doNotStrip "*/arm64-v8a/*.so"
        }
        externalNativeBuild {
            cmake {
                cppFlags "-std=c++14 -DANDROID_STL=c++_shared -DMR_SHARING_ANDROID -DWEBRTC_POSIX -DWEBRTC_ANDROID" 
            }
        }
    }
    buildTypes {
        // Full debug, including debug symbols for libwebrtc.
        // This produces a very large archive (50+ MB), but is useful
        // to debug issues inside libwebrtc itself.
        fulldebug {
            minifyEnabled false
            useProguard false
            jniDebuggable true
            debuggable true
        }
        // Regular debug with debug symbols for mrwebrtc only.
        // This produces a much more reasonably-sized and lightly optimized
        // archive, and should be the default for debugging.
        debug {
            minifyEnabled false
            useProguard true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            jniDebuggable true
            debuggable true
        }
        // Release version stripped from debug symbols and info
        release {
            minifyEnabled false
            useProguard true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    externalNativeBuild {
        cmake {
            path "./src/main/cpp/CMakeLists.txt"
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.appcompat:appcompat:1.1.0'
    // See e.g. examples/aarproject/app/build.gradle
    // Note: com.google.code.findbugs is for @Nullable,
    // see https://stackoverflow.com/questions/19030954/cant-find-nullable-inside-javax-annotation
    implementation 'com.google.code.findbugs:jsr305:3.0.2'
    // Local build of libwebrtc.jar; see mrwebrtc.gradle included from settings.gradle
    // Note that this is a compileOnly dependency because the content of libwebrtc.jar is then
    // embedded into libwebrtc.aar, which is itself merged into mrwebrtc.aar, so libwebrtc.jar
    // should not be added to the runtime dependencies.
    fulldebugCompileOnly files("${gradle.webrtcBinDir}/Debug/lib.java/sdk/android/libwebrtc.jar")
    debugCompileOnly files("${gradle.webrtcBinDir}/Debug/lib.java/sdk/android/libwebrtc.jar")
    releaseCompileOnly files("${gradle.webrtcBinDir}/Release/lib.java/sdk/android/libwebrtc.jar")
}

// Merge the libwebrtc.aar containing the Java interop classes for WebRTC
// into the mrwebrtc.aar archive containing the native JNI library.
task mergeLibwebrtcArchive(type: Exec) {
    workingDir "$projectDir"   
    println "Merge-archive.sh: Current working directory is $projectDir"

    // For a Windows based path amount of backslashes is irrelevant, adding some more to escape
    String WslRobustPath = "$projectDir".replaceAll("\\\\","\\\\\\\\")

    commandLine 'bash','./merge-archives.sh','-m',
                       "$WslRobustPath/build/outputs/aar/mrwebrtc.aar",'-o',
                       './build/outputs/aar/merged/mrwebrtc.aar'
}

// Copy the final AAR archive to the Plugins folder of the Unity library.
// This is currently only used when building with WSL2 on Windows, since
// there is no Linux version of the Unity editor so building on Linux
// requires a manual copy to the Windows machine hosting the Unity editor.
task copyToUnitySample {
    copy {
        from './build/outputs/aar/merged'
        include "*.aar"
        into '../../../../libs/unity/library/Runtime/Plugins/arm64-v8a'
    }
}

copyToUnitySample.dependsOn mergeLibwebrtcArchive

// Inject the copyToUnitySample task as a dependency of existing build tasks
tasks.whenTaskAdded { task ->
    // Once AAR bundling is done, merge the AAR archives
    if ((task.name == 'bundleReleaseAar') || (task.name == 'bundleDebugAar') || (task.name == 'bundleFulldebugAar')) {
        task.finalizedBy copyToUnitySample
    }
}
