# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See LICENSE in the project root for license information.

# MixedReality-WebRTC build pipeline for Release
# Build the core WebRTC implementation and the UWP wrappers

# Disable branch and PR triggers, the core implementation only changes
# when upgrading to a more recent version from Google, which is quite
# infrequent. Also this pipeline is very long (several hours) so should
# be triggered manually only when needed.
trigger: none
pr: none

# Give a unique name to the build each time it runs
name: release-core-$(SourceBranchName)-$(Date:yyyyMMdd)-$(Rev:r)

stages:

# Compile all platform/architecture/config variants as separate jobs
- stage: build
  displayName: Build webrtc.lib
  jobs:
#   - template: templates/jobs-libwebrtc.yaml
#     parameters:
#       buildAgent: 'MR Sharing On-Prem'
#       buildPlatform: 'Win32'
#       buildArch: 'x64'
#       buildConfig: 'Release'
#       skipUwpWrappers: true
#       skipPython27: true
  - template: templates/jobs-libwebrtc-uwp.yaml
    parameters:
      buildAgent: 'MR Sharing On-Prem'
      buildArch: 'x64'
      buildConfig: 'Release'
#   - template: templates/jobs-libwebrtc.yaml
#     parameters:
#       buildAgent: 'MR Sharing On-Prem'
#       buildPlatform: 'UWP'
#       buildArch: 'ARM'
#       buildConfig: 'Release'
#       skipUwpWrappers: true
#       skipPython27: true

# Create signed NuGet packages
- stage: pack
  displayName: Create signed NuGet packages
  dependsOn: build
  jobs:

  # Create the NuGet packages
  - template: templates/jobs-libwebrtc-nuget.yaml
    parameters:
      buildAgent: 'MR Sharing On-Prem'

  # Sign everything and publish signed NuGet packages
  - job: sign
    dependsOn: libwebrtc_nuget
    pool:
      name: Package ES Lab E
      steps:

      # Download binaries to sign from build stage
      - task: DownloadBuildArtifacts@0
        inputs:
          buildType: 'current'
          downloadType: 'single'
          artifactName: nuget_core
          downloadPath: '$(Build.SourcesDirectory)'

      # Download signing scripts
      - powershell: |
          $Authorization = "Basic " + [System.Convert]::ToBase64String([System.Text.Encoding]::UTF8.GetBytes('$(scriptsRepoVSTSuser):$(scriptsRepoPAT)'))
          git clone -c http.extraheader="AUTHORIZATION: $Authorization" -b prod $(scriptsRepoURL) $(Build.ArtifactStagingDirectory)\scripts
        displayName: "Clone release scripts"

      # Sign all files
      - template: templates/steps-codesign.yaml
        parameters:
          ConfigName: "$(Build.ArtifactStagingDirectory)/scripts/signconfig/artifactsSignConfig.xml"

      # Create pre-release packages
      - ${{ if eq(variables['MRWebRTCReleaseTag'], '') }}:
        - template: templates/jobs-libwebrtc-nuget.yaml
          parameters:
            version: '$(MRWebRTCVersion)-$(Build.BuildNumber).prerelease'
            packDestination: '$(Build.SourcesDirectory)\artifacts\prerelease'
      - ${{ if ne(variables['MRWebRTCReleaseTag'], '') }}:
        - template: templates/jobs-libwebrtc-nuget.yaml
          parameters:
            version: '$(MRWebRTCVersion)-$(Build.BuildNumber).prerelease.$(MRWebRTCReleaseTag)'
            packDestination: '$(Build.SourcesDirectory)\artifacts\prerelease'

      # Create release packages
      - ${{ if eq(variables['MRWebRTCReleaseTag'], '') }}:
        - template: templates/package.yml
          parameters:
            version: '$(MRWebRTCVersion)'
            packDestination: '$(Build.SourcesDirectory)\artifacts\release'
      - ${{ if ne(variables['MRWebRTCReleaseTag'], '') }}:
        - template: templates/package.yml
          parameters:
            version: '$(MRWebRTCVersion)-$(MRWebRTCReleaseTag)'
            packDestination: '$(Build.SourcesDirectory)\artifacts\release'        

      # Sign pre-release and release packages
      - template: templates/steps-codesign.yaml
        parameters:
          ConfigName: "$(Build.ArtifactStagingDirectory)/scripts/signconfig/nugetSignConfig.xml"

      # Push packages to NuGet feed
      - task: NuGetCommand@2
        displayName: 'NuGet push'
        inputs:
          command: push
          packagesToPush: '$(Build.SourcesDirectory)/artifacts/prerelease/**/*.nupkg;!$(Build.SourcesDirectory)/artifacts/prerelease/**/*.symbols.nupkg'
          publishVstsFeed: '$(NuGetFeedId)'
          buildProperties: 'version=$(MRWebRTCVersion)-$(Build.BuildNumber)'

